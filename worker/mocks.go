package worker

import (
	mock "github.com/stretchr/testify/mock"

	kafka "gopkg.in/confluentinc/confluent-kafka-go.v1/kafka"

	publisher "raccoon/publisher"

	raccoon "raccoon/proto"
)

// KafkaProducer is an autogenerated mock type for the KafkaProducer type
type mockKafkaProducer struct {
	mock.Mock
}

// ProduceBulk provides a mock function with given fields: events, deliveryChannel
func (_m *mockKafkaProducer) ProduceBulk(events []*raccoon.Event, deliveryChannel chan kafka.Event) (publisher.ProducerStats, error) {
	ret := _m.Called(events, deliveryChannel)

	var r0 publisher.ProducerStats
	if rf, ok := ret.Get(0).(func([]*raccoon.Event, chan kafka.Event) publisher.ProducerStats); ok {
		r0 = rf(events, deliveryChannel)
	} else {
		r0 = ret.Get(0).(publisher.ProducerStats)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]*raccoon.Event, chan kafka.Event) error); ok {
		r1 = rf(events, deliveryChannel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockMetric struct {
	mock.Mock
}

func (m *mockMetric) Count(bucket string, val int, tags string) {
	m.Called(bucket, val, tags)
}

func (m *mockMetric) Timing(bucket string, t int64, tags string) {
	m.Called(bucket, t, tags)
}
